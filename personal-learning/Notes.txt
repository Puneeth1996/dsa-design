1. Time and Space Complexity
Oct 3rd, 2023

Time Complexity : 

    Number of cpu cycles



Space Complexity : 

    No of additional stack ques created.




Jackson Kailath DSA Course 

Points to discuss once you get any question 
- ask for clarification question in interview 
    - As about boundary conditions or edge cases
- test cases should be written with interviwer 


1. Day 1 Arrays 


Time and space Complexity - https://www.bigocheatsheet.com/


2. Day 2 Arrays

24 May 2024
3. Day 3 Hash Table





25 May 2024
4. Day 4  Recursion



26 May 2024
5. Day 5  Recursion


28 May 2024
6. Day 6  String
    reading the character at given index in string is O(1) for time and space Complexity
    traversing through string is O(n) for time O(1) for space Complexity
    copying a string O(n) for time and space Complexity
    appending a string O(n) for time and space Complexity
    concatenation a string O(n+m) for time and space Complexity


5 June 2024
7. Day 7  String
    3. Longest Substring Without Repeating Characters
    Involves learning of sliding window pattern to get the length of the largest string

    49. Group Anagrams



10 July 2024 & 11 July 2024
8. Day 8 Searching







Aug 27th, 2024

11.30am 

Master the Coding Interview DSA


1 Getting more interviews
master-the-interview.png
https://www.resumemaker.online/


Resume Cheat Sheet
✅ Use a pre-designed resume template
✅ Make the resume fit on 1 page
✅ Include words from job description
✅ Include company name you are applying to
✅ Does your first item on your resume reflect what they are looking for?
✅ Experience titles demonstrate value
✅ Do you have an online link?
✅ Remove the word “I”
✅ No buzzwords describing how great you are
✅ Are you using Action words?
✅ Measure everything in terms of impact, don’t just describe your responsibilities
✅ Technical Knowledge/Skills should include what they are looking for. Only show years if it is impressive
✅ Include only sections/items that are impressive: Experience, Projects, Education, Technical Skills
✅ No typos or bad grammar




https://www.jobscan.co/

https://www.cakeresume.com/Engineering-resume-samples


https://thisresumedoesnotexist.com/


28 Aug 2024 
10.30am 

#Big O Cheat Sheet:

-Big Os
O(1) Constant- no loops
 O(log N) Logarithmic- usually searching algorithms have log n if they are sorted (Binary Search)
 O(n) Linear- for loops, while loops through n items
 O(n log(n)) Log Liniear- usually sorting operations
 O(n^2) Quadratic- every element in a collection needs to be compared to ever other element. Two
 nested loops
 O(2^n) Exponential- recursive algorithms that solves a problem of size N
 O(n!) Factorial- you are adding a loop for every element



Iterating through half a collection is still O(n)
Two separate collections: O(a * b)-What can cause time in a function?

Operations (+, -, *, /)
 Comparisons (<, >, ==)
 Looping (for, while)
 Outside Function call (function())-Rule Book


Rule 1: Always worst Case
Rule 2: Remove Constants
Rule 3: Different inputs should have different variables. O(a+b). A and B arrays nested would be
 O(a*b)
 + for steps in order
 * for nested steps
Rule 4: Drop Non-dominant terms-What causes Space complexity?
 Variables
 Data Structures
 Function Call
 Allocations



- Heap is where variables are stored and stacks are where function calls are stored


which code is better 

readiabilty + Memory and speed 

Data structure + Algortithm = Program

Interview 
Skills - Analytical - coding - Technical - communication









